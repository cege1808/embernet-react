{"version":3,"sources":["components/Navigation/Navigation.js","components/MapContainer/MapContainer.js","components/InfoContainer/InfoContainer.js","components/LoginContainer/LoginContainer.js","components/Constants.js","components/Chart/Chart.js","components/ModeSelector/ModeSelector.js","components/TableContainer/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelect","bind","assertThisInitialized","eventKey","e","onChangePage","react_default","a","createElement","Container","Nav","onSelect","fill","Item","Link","src","height","className","alt","React","Component","googleApiKey","Geocode","setApiKey","MapContainer","_React$Component","handleMarkerClick","place","marker","setState","selectedPlace","activeMarker","console","log","onMarkerClick","state","center_location","lat","lng","onMount","inherits","createClass","key","value","_this2","markers","forEach","position","push","dist","id","data","onClick","google","initialCenter","zoom","renderMarkers","GoogleApiWrapper","apiKey","InfoContainer","getLocationName","fromLatLng","then","response","address","results","formatted_address","location","error","nodeId","temperature","temperature_analog","pressure","humidity","eco2","tvoc","lightning_distance","created_at","prevProps","prevState","nodePosition","nodeData","react_moment_dist_default","responseGoogle","loggedIn","onChangeLogin","accessToken","responseFail","Row","Col","google_login_default","clientId","buttonText","onSuccess","onFailure","scope","chartOptions","responsive","maintainAspectRatio","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","datasets","spanGaps","showLine","label","yAxisID","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","requestAllNodes","query","kind","name","requestNode","filter","compositeFilter","filters","propertyFilter","op","property","integerValue","currentNodeId","order","direction","limit","requestEnvironmentalData","live","stringValue","startTime","toISOString","endTime","Chart","shouldComponentUpdate","nextProps","es","options","ref","chartRef","shortcuts","Today","moment","Yesterday","subtract","DayRange","rc_datetime_picker_cjs","startVal","onChange","onChangeStart","format","readOnly","endVal","onChangeEnd","disabled","component_default","defaultChecked","onChangeLive","Button","updating","variant","onUpdate","TableContainer","handleClick","preventDefault","node","JSON","parse","currentTarget","dataset","onRowClick","renderRows","rows","data-node","stringify","status","toUpperCase","system_warning","Table","dataType","App","handleLogin","token","handleChangeStart","time","handleChangeEnd","handleChangeLive","target","checked","intervalHandler","clearTimeout","timeout","currentLocation","currentNodeStatus","handleRowClick","row","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getData","setTimeout","stop","getAllNodes","_callee2","req","_context2","lastCursor","startCursor","fetch","method","headers","Authorization","concat","Accept","Content-Type","body","val","json","batch","vals","slice","newNodes","entityResults","d","entity","properties","node_id","geoPointValue","longitude","latitude","nodes","moreResults","endCursor","getNode","_callee3","_context3","currentNodeData","getDataHandler","_ref4","_callee4","_context4","elem","y","parseFloat","x","length","unix","NaN","DataHandler","_x","apply","arguments","_callee5","newData","_context5","toConsumableArray","graph","_meta","hidden","getChartRef","handleChangePage","pageSettings","pageState","handleSideBarClick","handleUpdate","_ref6","_callee6","_context6","_x2","infoOn","displayTable","handleToggleMapTable","homepagelogo","Jumbotron","LoginContainer_InfoContainer","Navigation_Navigation_Navigation","xs","components_MapContainer_MapContainer","settingsPage","TableContainer_TableContainer_TableContainer","icons","mapOrTable","ModeSelector_DayRange","InfoContainer_InfoContainer_InfoContainer","toggleSystemWarning","Chart_Chart_Chart","analyticsPage","dashboardPage","loginPage","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d3a0de5.chunk.js","sourcesContent":["import React from 'react';\nimport './Navigation.css';\nimport {Container, Nav} from 'react-bootstrap'\n\nexport default class Navigation extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this)\n  }\n  handleSelect(eventKey, e) {\n    // console.log(`selected ${eventKey}`);\n    this.props.onChangePage(eventKey);\n  }\n\n  render(){\n    return (\n      <Container>\n        <Nav\n          onSelect={this.handleSelect}\n          fill={true}\n        >\n          <Nav.Item>\n            <Nav.Link><img src=\"logo.png\" height=\"100\" className=\"d-inline-block align-top\" alt=\"embernet logo\" /></Nav.Link>\n          </Nav.Item>\n          <Nav.Item></Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"dashboard\" className=\"navigation active\">DASHBOARD</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"analytics\" className=\"navigation\">ANALYTICS</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"settings\" className=\"navigation\">SETTINGS</Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </Container>\n      );\n  }\n}","import React from 'react';\nimport './MapContainer.css';\nimport {GoogleApiWrapper, Map, Marker} from 'google-maps-react';\nimport Geocode from 'react-geocode';\n\nconst googleApiKey = 'AIzaSyDneFI94si2xido5kCZjoGlm42q2Uhuf7s';\nGeocode.setApiKey(googleApiKey);\n\nexport class MapContainer extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      center_location: {lat: 49.904, lng: -121.077},\n      activeMarker: {},\n      selectedPlace: {}\n    }\n    if(this.props.center_location){\n      this.state.center_location = this.props.center_location;\n    }\n    this.props.onMount();\n  }\n\n  handleMarkerClick = (place, marker, e) => {\n    this.setState({\n      selectedPlace: place,\n      activeMarker: marker,\n    });\n    console.log(place, marker, e);\n    this.props.onMarkerClick(place);\n  }\n\n  renderMarkers(){\n    let markers = [];\n    this.props.markers.forEach((place) => {\n      let position = {lat: place.lat, lng: place.lng};\n      markers.push(\n        <Marker key={place.id} id={place.id} position={position} data={place}\n       onClick={this.handleMarkerClick} />\n      );\n    });\n    // console.log(markers);\n    return markers;\n  }\n\n  render(){\n    return (\n      <Map google={this.props.google}\n      initialCenter={this.state.center_location}\n      zoom={6}\n      >\n        {this.renderMarkers()}\n      </Map>\n      )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:(googleApiKey)\n})(MapContainer)","import React from 'react';\nimport './InfoContainer.css';\nimport Geocode from 'react-geocode';\nimport Moment from 'react-moment';\n\nconst googleApiKey = 'AIzaSyDneFI94si2xido5kCZjoGlm42q2Uhuf7s';\nGeocode.setApiKey(googleApiKey);\n\nexport default class InfoContainer extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nodeId: '',\n      position: {lat: null, lng: null},\n      location: '',\n      data: {\n        temperature: null,\n        temperature_analog: null,\n        pressure: null,\n        humidity: null,\n        eco2: null,\n        tvoc: null,\n        lightning_distance: null,\n        created_at: null\n      }\n    }\n  }\n  getLocationName = (position) => {\n    Geocode.fromLatLng(position.lat, position.lng).then(\n        response => {\n          const address = response.results[10].formatted_address;\n          // console.log(response);\n          this.setState({location: address});\n        },\n        error => {\n          console.log(error)\n        }\n      )\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevProps.nodeId !== this.props.nodeId) {\n      this.props.onMount();\n      this.setState({\n        nodeId: this.props.nodeId,\n        position: this.props.nodePosition,\n        data: {\n          temperature: null,\n          temperature_analog: null,\n          pressure: null,\n          humidity: null,\n          eco2: null,\n          tvoc: null,\n          lightning_distance: null,\n          created_at: null\n        }\n      })\n      this.getLocationName(this.props.nodePosition);\n    }\n    if (prevProps.nodeData !== this.props.nodeData){\n      this.setState({\n        data: this.props.nodeData\n      })\n    }\n  }\n\n  render(){\n    let created_at, temperature, temperature_analog, pressure, humidity, eco2, tvoc, lightning_distance;\n    if(this.state.data.created_at){\n      created_at = <p>Last Updated:  <Moment>{this.state.data.created_at}</Moment></p>;\n    }\n    if(this.state.data.temperature){\n      temperature = <p>Temperature: {this.state.data.temperature}&deg;C</p>;\n    }\n    if(this.state.data.temperature_analog){\n      temperature_analog = <p>Temperature Analog: {this.state.data.temperature_analog}&deg;C</p>;\n    }\n    if(this.state.data.pressure){\n      pressure = <p>Pressure: {this.state.data.pressure} hPa</p>;\n    }\n    if(this.state.data.humidity){\n      humidity = <p>Humidity: {this.state.data.humidity}%</p>;\n    }\n    if(this.state.data.eco2){\n      eco2 = <p>eCO2: {this.state.data.eco2} ppm</p>;\n    }\n    if(this.state.data.tvoc){\n      tvoc = <p>TVOC: {this.state.data.tvoc} ppb</p>;\n    }\n    if(this.state.data.lightning_distance){\n      lightning_distance = <p>Lightning Distance: {this.state.data.lightning_distance}m</p>;\n    }\n    return (\n      <div className=\"info-container\">\n        <p>{this.state.location}</p>\n        <p>Lat: {this.state.position.lat}</p>\n        <p>Lng: {this.state.position.lng}</p>\n        <h5>Current Data</h5>\n          {created_at}\n          {temperature}\n          {temperature_analog}\n          {pressure}\n          {humidity}\n          {eco2}\n          {tvoc}\n          {lightning_distance}\n      </div>\n      )\n  }\n}","import React from 'react';\nimport './LoginContainer.css';\nimport GoogleLogin from 'react-google-login';\nimport {Row, Col} from 'react-bootstrap';\n\nexport default class InfoContainer extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loggedIn: false,\n    }\n  }\n  // OAuth authorized, do stuff\n  responseGoogle = (response) => {\n    this.setState({\n      loggedIn: true,\n    });\n    console.log(response);\n    console.log(\"Success\");\n    this.props.onChangeLogin(this.state.loggedIn, response.accessToken);\n  }\n\n  // OAuth failed, don't do stuff\n  responseFail = (response) => {\n    console.log(response);\n    console.log(\"Failed\");\n  }\n\n  render(){\n    return (\n      <Row className=\"login\">\n        <Col>\n        <GoogleLogin\n        clientId = \"1082753030684-esf02ot6g648m6slcmf2n3j8np778j91.apps.googleusercontent.com\"\n        buttonText = \"Login\"\n        onSuccess = {this.responseGoogle}\n        onFailure = {this.responseFail}\n        scope={\"https://www.googleapis.com/auth/datastore\"}\n        />\n        </Col>\n      </Row>\n      )\n  }\n}","export const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration : 500,\n    },\n    scales : {\n      xAxes: [{\n        gridLines: {\n          display: false,\n        },\n        type: 'time',\n        distribution: 'linear', // Distances can vary, based on time\n        scaleLabel: {\n          display: true,\n          labelString: 'Time'\n        },\n      }],\n      yAxes: [{\n        id: 'Temperature',\n        position: 'left',\n        gridLines: {\n          display: false,\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Temperature'\n        },\n        },\n        {\n          id: 'Pressure',\n          position: 'right',\n          gridLines: {\n            display: false,\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'Pressure'\n          },\n        }\n    ]\n    },\n}\n\nexport const data = {\n    datasets: [\n        {\n            spanGaps: false,\n            showLine: true,\n            label: 'Temperature',\n            yAxisID: 'Temperature',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [] // Data to update\n        },\n        {\n            spanGaps: false,\n            showLine: true,\n            label: 'Pressure',\n            yAxisID: 'Pressure',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(192,86,75,0.4)',\n            borderColor: 'rgba(192,86,75,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(192,86,75,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(192,86,75,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [] // Data to update\n        },\n        {\n            spanGaps: false,\n            showLine: true,\n            label: 'Humidity%',\n            yAxisID: 'Humidity',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(192,86,75,0.4)',\n            borderColor: 'rgba(192,86,75,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(192,86,75,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(192,86,75,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [] // Data to update\n        },\n    ],\n};\n\nexport const requestAllNodes = () => {\n  return {\n    query: {\n      kind: [\n        {name: 'Node'}\n      ]\n    }\n  }\n}\n\nexport const requestNode = (state) => {\n  return {\n    query: {\n      filter: {\n        compositeFilter: {\n          filters: [\n            {\n              propertyFilter: {\n                op: 'EQUAL',\n                property: { name: 'node_id'},\n                value: {integerValue: state.currentNodeId}\n              }\n            }\n          ],\n          op: \"AND\"\n        }\n      },\n      kind: [\n        {name: 'EnvironmentalData'}\n      ],\n      order: [\n        {\n            direction: 'DESCENDING',\n            property: {name: 'created_at'}\n        }\n      ],\n      limit: 1\n    }\n  }\n}\n\nexport const requestEnvironmentalData = (state) => {\nreturn (state.live) ? {\n    query: {\n        filter: {\n            compositeFilter: {\n                filters: [\n                {\n                    propertyFilter: {\n                        op: 'GREATER_THAN_OR_EQUAL',\n                        property: {\n                            name: 'created_at'\n                        },\n                        value: {\n                            stringValue: state.startTime.toISOString()\n                        }\n                    }\n                },\n                {\n                    propertyFilter: {\n                        op: 'EQUAL',\n                        property: {\n                            name: 'node_id'\n                        },\n                        value: {\n                            integerValue: state.currentNodeId\n                        }\n                    }\n                }\n                ],\n                op: \"AND\"\n            }\n        },\n        kind: [\n            {\n                name: 'EnvironmentalData'\n            }\n        ],\n    }\n    } : {\n    query: {\n        filter: {\n            compositeFilter: {\n                filters: [\n                {\n                    propertyFilter: {\n                        op: 'GREATER_THAN_OR_EQUAL',\n                        property: {\n                            name: 'created_at'\n                        },\n                        value: {\n                            stringValue: state.startTime.toISOString()\n                        }\n                    }\n                },\n                {\n                    propertyFilter: {\n                        op: 'LESS_THAN_OR_EQUAL',\n                        property: {\n                            name: 'created_at'\n                        },\n                        value: {\n                            stringValue: state.endTime.toISOString()\n                        }\n                    }\n                },\n                {\n                    propertyFilter: {\n                        op: 'EQUAL',\n                        property: {\n                            name: 'node_id'\n                        },\n                        value: {\n                            stringValue: state.currentNodeId\n                        }\n                    }\n                }\n                ],\n                op: \"AND\"\n            }\n        }\n        ,\n        kind: [\n        {\n            name: \"EnvironmentalData\"\n        }\n        ]\n\n    }\n}\n};","import React from 'react';\nimport './Chart.css';\nimport {Line} from 'react-chartjs-2'\nimport {chartOptions} from '../Constants';\n\nexport default class Chart extends React.Component {\n  // Flag to check whether the parent is grabbing values,\n  // if it isn't we don't update\n  shouldComponentUpdate = (nextProps) => {\n    return this.props.data !== nextProps.data;\n  }\n  render(){\n    return (\n      <Line data={this.props.data}\n            options={chartOptions}\n            ref={ref => this.props.chartRef(ref)}\n      />\n      )\n  }\n}","import React from 'react';\nimport './ModeSelector.css';\nimport {Row, Col, Button} from 'react-bootstrap';\nimport moment from 'moment';\nimport Toggle from 'react-toggle'\nimport \"react-toggle/style.css\"\nimport {DatetimePickerTrigger} from 'rc-datetime-picker';\n\nconst shortcuts = {\n    'Today': moment(),\n    'Yesterday': moment().subtract(1, 'days'),\n};\n\nexport default class DayRange extends React.Component {\n  render(){\n    return (\n      <Row className=\"dayrange\">\n        <Col>\n          <DatetimePickerTrigger\n            className = \"input is-rounded is-small\"\n            shortcuts = {shortcuts}\n            moment = {this.props.startVal}\n            onChange = {this.props.onChangeStart}>\n            <input type=\"text\" value={this.props.startVal.format('YYYY-MM-DD HH:mm')} readOnly />\n          </DatetimePickerTrigger>\n        </Col>\n        <Col>\n          <DatetimePickerTrigger\n            className = \"input is-rounded is-small\"\n            shortcuts = {shortcuts}\n            moment = {this.props.endVal}\n            onChange = {this.props.onChangeEnd}\n            disabled = {(this.props.endVal === null) ? true : false}>\n            <input\n              type = \"text\"\n              value = {(this.props.endVal === null) ?\n                \"Current\" : this.props.endVal.format('YYYY-MM-DD HH:mm')}\n              readOnly\n              disabled = {(this.props.endVal === null) ? true : false}\n            />\n          </DatetimePickerTrigger>\n        </Col>\n        <Col className=\"modeselector-toggle\">\n          <Toggle\n            defaultChecked = {this.props.live}\n            onChange = {this.props.onChangeLive}\n          />\n        </Col>\n        <Col>\n          <Button\n            disabled={this.props.updating}\n            variant=\"dark\"\n            onClick={this.props.onUpdate}\n          >\n            Update\n          </Button>\n        </Col>\n\n      </Row>\n      )\n  }\n}","import React from 'react';\nimport './TableContainer.css';\nimport {Table} from 'react-bootstrap';\n\n\nexport default class TableContainer extends React.Component {\n  constructor(props){\n    super(props);\n    this.props.onMount();\n    this.renderRows = this.renderRows.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n    let node = JSON.parse(e.currentTarget.dataset.node);\n    // console.log(node);\n    this.props.onRowClick(node);\n  }\n\n  renderRows(){\n    let rows = [];\n    this.props.rows.forEach((node) => {\n      // console.log(node);\n      rows.push(\n        <tr key={node.id} onClick={this.handleClick} data-node={JSON.stringify(node)}>\n          <td>{node.id}</td>\n          <td>{node.lat}</td>\n          <td>{node.lng}</td>\n          <td>{node.status.toUpperCase()}</td>\n          <td>{node.system_warning.toUpperCase()}</td>\n        </tr>\n      );\n    });\n    // console.log(rows);\n    return rows;\n  }\n\n\n  render(){\n    return (\n      <Table responsive className=\"table-container\">\n        <thead>\n          <th>NODE #</th>\n          <th>LONGITUDE</th>\n          <th>LATITUDE</th>\n          <th>STATUS</th>\n          <th>SYSTEM WARNING</th>\n        </thead>\n        <tbody>\n          {this.renderRows()}\n        </tbody>\n      </Table>\n      )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap';\nimport Navigation from './components/Navigation/Navigation';\nimport MapContainer from './components/MapContainer/MapContainer';\nimport InfoContainer from './components/InfoContainer/InfoContainer';\n// import ChartContainer from './component s/ChartContainer/ChartContainer';\nimport LoginContainer from './components/LoginContainer/LoginContainer';\nimport Chart from './components/Chart/Chart';\nimport moment from 'moment';\nimport ModeSelector from './components/ModeSelector/ModeSelector';\nimport {data, requestAllNodes, requestNode, requestEnvironmentalData} from './components/Constants';\nimport Toggle from 'react-toggle'\nimport \"react-toggle/style.css\"\nimport TableContainer from './components/TableContainer/TableContainer';\n\nconst dataType = {\n  temperature: 'doubleValue',\n  temperature_analog: 'doubleValue',\n  pressure: 'doubleValue',\n  humidity: 'doubleValue',\n  eco2: 'integerValue',\n  tvoc: 'integerValue',\n  lightning_distance: 'integerValue'\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.lastCursor = null;\n    this.vals = [];\n    this.chartRef = null;\n\n    this.state = {\n      startTime: moment(),\n      endTime: moment(),\n      live: false,\n      graph: data,\n      updating: false,\n      infoOn: true,\n      nodes: [], // {location: 'vancouver', position: {lat: 49.278, lng: -123.121}}\n      loggedIn: false,\n      currentNodeId: null,\n      currentLocation: {},\n      currentNodeData: {},\n      currentNodeStatus: '',\n      pageState: 'analytics',\n      pageSettings: 'hidden',\n      displayTable: false\n    }\n    this.handleChangePage = this.handleChangePage.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleRowClick = this.handleRowClick.bind(this);\n    this.handleToggleMapTable = this.handleToggleMapTable.bind(this);\n  }\n\n  handleLogin = (loggedIn, token) => {\n    this.setState({\n      loggedIn: loggedIn\n    })\n    this.token = token;\n  }\n\n  // Handle the start time change\n  handleChangeStart = (time) => {\n    // console.log('change start');\n    this.setState({\n      startTime: time\n    })\n  }\n\n  // Handle the end time change\n  handleChangeEnd = (time) => {\n    this.setState({\n      endTime: time\n    })\n  }\n\n  //Handle the current boolean for \"live\" plotting\n  handleChangeLive = (e) => {\n    let status = e.target.checked;\n    if (status) {\n      this.setState({\n        live: true,\n        endTime: null\n      })\n      this.intervalHandler();\n    } else {\n      clearTimeout(this.timeout);\n      this.setState({\n        live: false\n      })\n      this.handleChangeEnd(moment());\n    }\n  }\n\n  handleMarkerClick = (marker) => {\n    // console.log(marker);\n    let data = marker.data;\n    this.setState({\n      currentNodeId: data.id,\n      currentLocation: {lat: data.lat, lng: data.lng},\n      currentNodeStatus: data.status\n    })\n  }\n\n  handleRowClick = (row) => {\n    this.setState({\n      currentNodeId: row.id,\n      currentLocation: {lat: row.lat, lng: row.lng},\n      currentNodeStatus: row.status\n    })\n  }\n\n  intervalHandler = async () => {\n    await this.getData();\n    console.log(\"get data done, resetting\");\n    if (this.state.live) {\n      this.timeout = setTimeout(this.intervalHandler, 2000);\n    }\n  }\n\n  getAllNodes = async () => {\n    // console.log('getAllNodes');\n    // Build our query\n    let req = requestAllNodes();\n\n    // Change our lastCursor value\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\n\n    // Call our fetch\n    await fetch(\"https://datastore.googleapis.com/v1/projects/embernet-api:runQuery?prettyPrint=true&alt=json\",\n      {\n        method: 'POST',\n        headers: {\n          'Authorization' : `Bearer ${this.token}`,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\n        // Try safety\n        try {\n          // console.log(e);\n          if ('entityResults' in e.batch) {\n            // console.log(e.batch);\n            if (this.lastCursor === null) {\n              this.vals = [];\n            } else {\n              this.vals = this.vals.slice(); // Return a copy\n            }\n            let newNodes = [];\n            e.batch.entityResults.forEach(d => {\n              // For a coordinate\n              // console.log(d);\n              newNodes.push({\n                id: d.entity.properties.node_id.integerValue,\n                lng: d.entity.properties.position.geoPointValue.longitude,\n                lat: d.entity.properties.position.geoPointValue.latitude,\n                status: d.entity.properties.status.stringValue,\n                system_warning: d.entity.properties.system_warning.stringValue\n              })\n            });\n            this.setState({\n              nodes: newNodes\n            })\n          } else {\n            // Clear our values\n            this.vals = [];\n          }\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\n            console.log(\"Not done\");\n            this.lastCursor = e.batch.endCursor;\n            return this.getAllNodes();\n          }\n        } catch (error) {\n          console.log(error);\n        }\n        // console.log(this.vals);\n        // console.log(\"Done\");\n        // console.log(this.state.nodes);\n        this.lastCursor = null;\n        return true;\n      }));\n  }\n\n  getNode = async () => {\n    // console.log('get node data');\n    // Build our query\n    let req = requestNode(this.state);\n\n    // Change our lastCursor value\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\n\n    // Call our fetch\n    await fetch(\"https://datastore.googleapis.com/v1/projects/embernet-api:runQuery?prettyPrint=true&alt=json\",\n      {\n        method: 'POST',\n        headers: {\n          'Authorization' : `Bearer ${this.token}`,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\n        // Try safety\n        try {\n          // console.log(e);\n          if ('entityResults' in e.batch) {\n            // console.log(e.batch);\n            if (this.lastCursor === null) {\n              this.vals = [];\n            } else {\n              this.vals = this.vals.slice(); // Return a copy\n            }\n            // console.log(e.batch.entityResults);\n            let data = e.batch.entityResults[0].entity.properties;\n            // console.log(data);\n\n            this.setState({\n              currentNodeData: {\n                temperature: data.temperature ? data.temperature[dataType['temperature']] : null,\n                temperature_analog: data.temperature_analog ? data.temperature_analog[dataType['temperature_analog']] : null,\n                pressure: data.pressure ? data.pressure[dataType['pressure']] : null,\n                humidity: data.humidity ? data.humidity[dataType['humidity']] : null,\n                eco2: data.eco2 ? data.eco2[dataType['eco2']] : null,\n                tvoc: data.tvoc ? data.tvoc[dataType['tvoc']] : null,\n                lightning_distance: data.lightning_distance ? data.lightning_distance[dataType['lightning_distance']] : null,\n                created_at: data.created_at.stringValue\n              }\n            })\n          } else {\n            // Clear our values\n            this.vals = [];\n          }\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\n            console.log(\"Not done\");\n            this.lastCursor = e.batch.endCursor;\n            return this.getNode();\n          }\n        } catch (error) {\n          console.log(error);\n        }\n        // console.log(this.vals);\n        // console.log(\"Done\");\n        // console.log(this.state.nodes);\n        this.lastCursor = null;\n        return true;\n      }));\n  }\n\n  // POST using OAuth creds to retrieve datastore based on time\n  // Async means it returns an implicit Promise that we will resolve later\n  getDataHandler = async (type) => {\n    console.log('run data handler');\n    // Build our query\n    let req = requestEnvironmentalData(this.state);\n    console.log(req);\n    // Change our lastCursor value\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\n\n    // Call our fetch\n    await fetch(\"https://datastore.googleapis.com/v1/projects/embernet-api:runQuery?prettyPrint=true&alt=json\",\n      {\n        method: 'POST',\n        headers: {\n          'Authorization' : `Bearer ${this.token}`,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\n        // Try safety\n        try {\n          console.log(e);\n          if ('entityResults' in e.batch) {\n            console.log(e.batch);\n            if (this.lastCursor === null) {\n              this.vals = [];\n            } else {\n              this.vals = this.vals.slice(); // Return a copy\n            }\n            e.batch.entityResults.forEach(d => {\n              // For a coordinate\n              console.log(d);\n              let elem = {};\n              elem.y = parseFloat(d.entity.properties[type][dataType[type]]);\n              elem.x = moment(d.entity.properties.created_at.stringValue);\n              // Check if the last element was greater than 10 minutes ago\n              if (this.vals.length > 0 && elem.x.unix() - moment(this.vals[this.vals.length - 1].x).unix() > 600) {\n                this.vals.push({\n                  y: NaN,\n                  x: elem.x\n                });\n              }\n              this.vals.push(elem);\n            });\n          } else {\n            // Clear our values\n            this.vals = [];\n          }\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\n            console.log(\"Not done\");\n            this.lastCursor = e.batch.endCursor;\n            return this.DataHandler(type);\n          }\n        } catch (error) {\n          console.log(error);\n        }\n        console.log(this.vals);\n        console.log(\"Done\");\n        this.lastCursor = null;\n        return true;\n      }));\n  }\n\n  // Handler for our data, which sets up a promise\n  // that updates once our data has been set up\n  getData = async () => {\n    console.log('run get data');\n    this.setState({\n      updating: true // Set updating to true so we render notice\n    });\n    let newData = [\n      ...this.state.graph.datasets, // Spread operator allows us to copy things\n    ];\n    // Get temperature\n    if (this.chartRef !== null && this.chartRef.props.data.datasets[0]._meta[0].hidden !== true) {\n      await this.getDataHandler('temperature');\n      newData[0].data = this.vals;\n    }\n    // Get pressure\n    if (this.chartRef !== null && this.chartRef.props.data.datasets[1]._meta[0].hidden !== true) {\n      await this.getDataHandler('pressure');\n      newData[1].data = this.vals;\n    }\n    // Get humidity\n    if (this.chartRef !== null && this.chartRef.props.data.datasets[2]._meta[0].hidden !== true) {\n      await this.getDataHandler('humidity');\n      newData[2].data = this.vals;\n    }\n    this.setState({\n      graph: {\n        datasets: newData\n      },\n      // currentLocation: this.vals.slice(),\n      updating: false // done updating\n    });\n  }\n\n  getChartRef = (ref) => {\n    // Get reference to the chart\n    if (this.chartRef === null && ref !== null) {\n      this.chartRef = ref;\n    }\n  }\n\n  handleChangePage = (eventKey) => {\n    if(eventKey === \"settings\"){\n      this.setState({pageSettings: ''})\n    }\n    else{\n      this.setState({ pageState: eventKey})\n    }\n  }\n\n  handleSideBarClick = (e) => {\n    e.preventDefault();\n    this.setState({pageSettings: 'hidden'})\n  }\n\n  handleUpdate = async (e) => {\n    e.preventDefault();\n    await this.getData();\n  }\n\n  handleToggleMapTable(){\n    this.setState({displayTable: !this.state.displayTable})\n  }\n\n  loginPage(){\n    let homepagelogo = (\n        <Row className=\"d-inline-block align-top homepage-logo\">\n          <img src=\"logo.png\" height=\"300\" alt=\"embernet logo\" />\n        </Row>\n      );\n    return (\n      <Jumbotron className=\"App\">\n        {homepagelogo}\n        <LoginContainer onChangeLogin={this.handleLogin} />\n      </Jumbotron>\n    );\n  }\n\n  dashboardPage(){\n    return (\n      <div>\n        <Jumbotron className=\"App\">\n          <Navigation onChangePage={this.handleChangePage}/>\n          <Container className=\"main-body\">\n            <Row>\n              <Col xs={8} className=\"map overview-map\" >\n                <Row>\n                  <MapContainer\n                    markers={this.state.nodes}\n                    onMarkerClick={this.handleMarkerClick}\n                    onMount={this.getAllNodes}\n                   />\n                 </Row>\n                 <Row>\n                  <div className=\"overview-systemwarning systemwarning\">\n                    <h3 className=\"bold\">System Warnings</h3>\n                    <div className=\"details\">\n                      <p>10239//04302019//13:14:40//\"Lightning Detected - 4 km away.\"</p>\n                      <p>00281//04302019//13:14:30//\"Lightning Detected - 12 km away.\"</p>\n                      <p>10239//04302019//13:14:25//\"Error Message.\"</p>\n                      <p>10239//04302019//13:14:22//\"RISK elevated to HIGH.\"</p>\n                      <p>10239//04302019//13:14:14//\"RISK lowered to LOW.\"</p>\n                      <p>10239//04302019//13:14:12/\"Communication with node lost. Investigate further.\"</p>\n                      <p>10239//04302019//13:14:8//\"LOW POWER. Battery at 4%. Plan for extraction.\"</p>\n                      <p>10239//04302019//13:14:7//\"Node in extraction mode\"</p>\n                    </div>\n                  </div>\n                 </Row>\n              </Col>\n              <Col xs={3} className=\"overview\" >\n                <Row className=\"overview-box\">\n                  <Col className=\"bold overview-number\">384</Col>\n                  <Col className=\"overview-desc\">Active Nodes</Col>\n                </Row>\n                <Row className=\"overview-box\">\n                  <Col className=\"bold overview-number\">3</Col>\n                  <Col className=\"overview-desc\">Offline Nodes</Col>\n                </Row>\n                <Row className=\"overview-box\">\n                  <Col className=\"bold overview-number\">24</Col>\n                  <Col className=\"overview-desc\">New Nodes</Col>\n                </Row>\n                <Row className=\"overview-box\">\n                  <Col className=\"bold overview-number\">2</Col>\n                  <Col className=\"overview-desc\">Active Fires</Col>\n                </Row>\n                <Row className=\"overview-box\">\n                  <Col className=\"bold overview-number\">5</Col>\n                  <Col className=\"overview-desc\">KM2 On Fire</Col>\n                </Row>\n              </Col>\n            </Row>\n          </Container>\n        </Jumbotron>\n        {this.settingsPage()}\n      </div>\n      );\n  }\n\n  mapOrTable(){\n    if(this.state.displayTable){\n      return (<Col xs={12} className=\"overview-table\" >\n        <TableContainer\n          rows={this.state.nodes}\n          onRowClick={this.handleRowClick}\n          onMount={this.getAllNodes}\n        />\n      </Col>);\n    }\n    else{\n      return(\n        <Col xs={12} className=\"overview-map\" >\n          <MapContainer\n            markers={this.state.nodes}\n            onMarkerClick={this.handleMarkerClick}\n            onMount={this.getAllNodes}\n           />\n        </Col>\n        )\n    }\n  }\n\n  toggleSystemWarning(){\n    if(this.state.currentNodeId){\n      return (\n        <div>\n        <p>10239//04302019//13:14:40//\"Lightning Detected - 4 km away.\"</p>\n        <p>00281//04302019//13:14:30//\"Lightning Detected - 12 km away.\"</p>\n        <p>10239//04302019//13:14:25//\"Error Message.\"</p>\n        <p>10239//04302019//13:14:22//\"RISK elevated to HIGH.\"</p>\n        <p>10239//04302019//13:14:14//\"RISK lowered to LOW.\"</p>\n        <p>10239//04302019//13:14:12/\"Communication with node lost. Investigate further.\"</p>\n        <p>10239//04302019//13:14:8//\"LOW POWER. Battery at 4%. Plan for extraction.\"</p>\n        <p>10239//04302019//13:14:7//\"Node in extraction mode\"</p>\n        </div>\n        )\n    }\n    else {\n      return;\n    }\n  }\n\n  analyticsPage(){\n    return (\n        <div>\n        <Jumbotron className=\"App\">\n          <Navigation onChangePage={this.handleChangePage}/>\n          <Container className=\"main-body\">\n            <Row className=\"maptable-toggle\">\n              <span>MAP</span>\n              <Toggle\n                defaultChecked = {this.state.displayTable}\n                onChange = {this.handleToggleMapTable}\n                icons={false}\n              />\n              <span>TABLE</span>\n            </Row>\n            <Row>\n              {this.mapOrTable()}\n            </Row>\n            <Row  className=\"analytics-info\">\n              <Col xs={6}>\n                <Row>\n                  <ModeSelector\n                    startVal = {this.state.startTime}\n                    endVal = {this.state.endTime}\n                    live = {this.state.live}\n                    updating = {this.state.updating}\n                    onChangeStart = {this.handleChangeStart}\n                    onChangeEnd = {this.handleChangeEnd}\n                    onChangeLive= {this.handleChangeLive}\n                    onUpdate={this.handleUpdate}\n                  />\n                </Row>\n                <Row className=\"analytics-status\">\n                  <Col xs={4}>\n                    <Row>\n                      <div className=\"node-status\">\n                        <h5>NODE STATUS</h5>\n                        <h3 className={`${this.state.currentNodeStatus} node-level bold`}>{this.state.currentNodeStatus.toUpperCase()}</h3>\n                        <div className={`${this.state.currentNodeStatus} node-indicator`}></div>\n                      </div>\n                    </Row>\n                    <Row>\n                      <div className=\"node-number\">\n                        <h5>NODE #</h5>\n                        <h3 className=\"bold\">000{this.state.currentNodeId}</h3>\n                        <InfoContainer\n                          nodeId={this.state.currentNodeId}\n                          nodeData={this.state.currentNodeData}\n                          nodePosition={this.state.currentLocation}\n                          onMount={this.getNode}\n                        />\n                      </div>\n                    </Row>\n                  </Col>\n                  <Col xs={8}>\n                    <div className=\"systemwarning analytics-systemwarning\">\n                      <h3 className=\"bold\">System Warnings</h3>\n                      <div className=\"details\">\n                        {this.toggleSystemWarning()}\n                      </div>\n                    </div>\n                  </Col>\n                </Row>\n              </Col>\n              <Col xs={6} className=\"chart\">\n                <Chart data={this.state.graph} chartRef={this.getChartRef} />\n              </Col>\n            </Row>\n          </Container>\n        </Jumbotron>\n        {this.settingsPage()}\n        </div>\n        );\n  }\n\n  settingsPage(){\n    return (\n      <div className={`settings-sidebar ${this.state.pageSettings}`} onClick={this.handleSideBarClick}>\n          <h3>Jane Smith</h3>\n          <p>Add Node</p>\n          <p>Notifications</p>\n          <p>Logout</p>\n          <small>Copyright 2019 emberNet. All rights reserved.</small>\n      </div>\n    );\n  }\n\n  render() {\n    if(!this.state.loggedIn){\n      return this.loginPage();\n    } else{\n      if(this.state.pageState === 'analytics'){\n        return this.analyticsPage();\n      } else{\n        return this.dashboardPage();\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}